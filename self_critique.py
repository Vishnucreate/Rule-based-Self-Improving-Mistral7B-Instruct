# -*- coding: utf-8 -*-
"""Self-critique.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N2cRAjH15E6BZKvp8rWQ8HEXUrB7D2AP
"""

# ===============================================================
# üîÅ LOOPING BLOG WRITER (HF version, ready for Colab)
# ===============================================================

!pip install transformers accelerate torch sentencepiece -q

from transformers import pipeline
import re, time, random

# ---------------------------------------------------------------
# 1Ô∏è‚É£  Load a local Hugging Face model (no API key needed)
# ---------------------------------------------------------------
generator = pipeline(
    "text-generation",
    model="mistralai/Mistral-7B-Instruct-v0.2",
    device_map="auto",
    torch_dtype="auto"
)

# ---------------------------------------------------------------
# 2Ô∏è‚É£  Synthetic blog-style instruction
# ---------------------------------------------------------------
BLOG_INSTRUCTIONS = """
You are a professional blog writer who follows these rules:
- Use a friendly, human tone with clear structure.
- Begin with an engaging hook or question.
- Organize into at least 3 markdown sections (use # headers).
- Use real-world examples or analogies.
- End with a summary or call to action.
- Avoid clich√©s like "in conclusion" or "as mentioned above".
- Target length: 500‚Äì700 words.
"""

# ---------------------------------------------------------------
# 3Ô∏è‚É£  Rule-based evaluation functions
# ---------------------------------------------------------------
def eval_min_word_count(text, min_words=500):
    return len(text.split()) >= min_words

def eval_has_hook(text):
    hook_keywords = ["imagine", "picture this", "did you know", "what if", "surprising"]
    intro = text.split("\n")[0].lower()
    return any(k in intro for k in hook_keywords)

def eval_section_headers(text, min_sections=3):
    headers = re.findall(r"^#+\s", text, re.MULTILINE)
    return len(headers) >= min_sections

def eval_no_prohibited_phrases(text):
    bad = ["in conclusion", "as mentioned above"]
    return all(b not in text.lower() for b in bad)

def eval_has_summary_or_cta(text):
    good = ["to sum up", "in summary", "takeaway", "call to action", "next steps"]
    return any(g in text.lower() for g in good)

def evaluate_blog(text):
    return {
        "min_word_count": eval_min_word_count(text),
        "has_hook": eval_has_hook(text),
        "section_headers": eval_section_headers(text),
        "no_prohibited_phrases": eval_no_prohibited_phrases(text),
        "has_summary_or_cta": eval_has_summary_or_cta(text),
    }

# ---------------------------------------------------------------
# 4Ô∏è‚É£  Blog generation function
# ---------------------------------------------------------------
def generate_blog(topic, prev_draft=None, failed=None):
    prompt = BLOG_INSTRUCTIONS + f"\nTopic: {topic}\n"
    if prev_draft and failed:
        prompt += (
            f"The previous draft failed the following checks: {failed}. "
            "Please rewrite and improve it accordingly.\n"
        )
    result = generator(
        prompt,
        max_new_tokens=800,
        temperature=0.7,
        top_p=0.9,
        do_sample=True,
        pad_token_id=generator.tokenizer.eos_token_id,
    )[0]["generated_text"]
    # Keep only the part after the topic line
    return result.split("Topic:")[-1].strip()

# ---------------------------------------------------------------
# 5Ô∏è‚É£  Loop until all evals pass
# ---------------------------------------------------------------
def loop_until_good(topic, max_loops=5):
    draft = generate_blog(topic)
    for i in range(max_loops):
        scores = evaluate_blog(draft)
        if all(scores.values()):
            print(f"‚úÖ Passed all evals on attempt {i+1}")
            return draft
        failed = [k for k,v in scores.items() if not v]
        print(f"‚ùå Attempt {i+1} failed checks: {failed}")
        draft = generate_blog(topic, draft, failed)
        time.sleep(2)
    print("‚ö†Ô∏è Max attempts reached; some checks may still fail.")
    return draft

# ---------------------------------------------------------------
# 6Ô∏è‚É£  Run it!
# ---------------------------------------------------------------
topic = "How AI is Revolutionizing Personal Productivity"
final_blog = loop_until_good(topic)

print("\n\n================= üìù FINAL BLOG =================\n")
print(final_blog)